# Generated by Django 5.0.3 on 2024-04-07 00:53

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="CustomUnavailableDayModel",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        verbose_name="id",
                    ),
                ),
                ("day", models.DateField(verbose_name="Dia indisponivel")),
            ],
            options={
                "verbose_name_plural": "Unavailable days",
                "ordering": ["day"],
            },
        ),
        migrations.CreateModel(
            name="FixedUnavailableDayModel",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        verbose_name="id",
                    ),
                ),
                (
                    "day",
                    models.SmallIntegerField(
                        choices=[
                            (0, "Domingo"),
                            (1, "Segunda-feira"),
                            (2, "Terça-feira"),
                            (3, "Quarta-feira"),
                            (4, "Quinta-feira"),
                            (5, "Sexta-feira"),
                            (6, "Sábado"),
                        ],
                        verbose_name="Dia da semana indisponivel",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Unavailable week days",
                "ordering": ["day"],
            },
        ),
        migrations.CreateModel(
            name="FixedUnavailableHourModel",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        verbose_name="id",
                    ),
                ),
                (
                    "hour",
                    models.SmallIntegerField(
                        choices=[
                            (0, "Meia-noite"),
                            (1, "1 hora"),
                            (2, "2 horas"),
                            (3, "3 horas"),
                            (4, "4 horas"),
                            (5, "5 horas"),
                            (6, "6 horas"),
                            (7, "7 horas"),
                            (8, "8 horas"),
                            (9, "9 horas"),
                            (10, "10 horas"),
                            (11, "11 horas"),
                            (13, "13 horas"),
                            (14, "14 horas"),
                            (15, "15 horas"),
                            (16, "16 horas"),
                            (17, "17 horas"),
                            (18, "18 horas"),
                            (19, "19 horas"),
                            (20, "20 horas"),
                            (21, "21 horas"),
                            (22, "22 horas"),
                            (23, "23 horas"),
                        ],
                        verbose_name="Horario indisponivel",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Unavailable hours",
                "ordering": ["hour"],
            },
        ),
        migrations.CreateModel(
            name="QualificationModel",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        verbose_name="id",
                    ),
                ),
                ("name", models.CharField(max_length=255, verbose_name="Nome")),
                ("conclusion_date", models.DateField(verbose_name="Data de conclusão")),
                (
                    "file",
                    models.TextField(
                        blank=True,
                        null=True,
                        verbose_name="Link do comprovante de conclusão",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Qualifications",
                "ordering": ["conclusion_date"],
            },
        ),
        migrations.CreateModel(
            name="SpecialCareModel",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "name",
                    models.IntegerField(
                        choices=[
                            (0, "Cuidados com a Saúde"),
                            (1, "Apoio Emocional"),
                            (2, "Fisioterapia"),
                            (3, "Acompanhamento Médico"),
                            (4, "Apoio à Mobilidade"),
                            (5, "Cuidados Pessoais"),
                            (6, "Apoio Doméstico"),
                            (7, "Nutrição"),
                            (8, "Atividades Recreativas"),
                            (9, "Gestão de Demência/Alzheimer"),
                            (10, "Suporte Noturno"),
                            (11, "Gestão da Dor"),
                            (12, "Cuidados Paliativos"),
                        ]
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SpecializationModel",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        verbose_name="id",
                    ),
                ),
                (
                    "name",
                    models.SmallIntegerField(
                        choices=[
                            (0, "Cuidados Básicos de Saúde"),
                            (1, "Apoio à Mobilidade"),
                            (2, "Higiene e Cuidados Pessoais"),
                            (3, "Nutrição e Preparo de Refeições"),
                            (4, "Estimulação Cognitiva e Emocional"),
                            (5, "Acompanhamento e Transporte"),
                            (6, "Gestão de Rotinas e Medicamentos"),
                            (7, "Cuidados com o Ambiente Doméstico"),
                            (8, "Suporte em Cuidados Paliativos"),
                            (9, "Formação em Demência e Alzheimer"),
                        ],
                        verbose_name="Especialização",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="WorkExperienceModel",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        verbose_name="id",
                    ),
                ),
                ("place", models.CharField(max_length=128, verbose_name="Local")),
                ("description", models.TextField(verbose_name="Descrição")),
                ("start_date", models.DateField(verbose_name="Data de inicio")),
                ("end_date", models.DateField(verbose_name="Data de saida")),
            ],
            options={
                "verbose_name_plural": "Work Experiences",
                "ordering": ["end_date"],
            },
        ),
        migrations.CreateModel(
            name="CustomUserModel",
            fields=[
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("email", models.EmailField(max_length=254, unique=True)),
                ("password", models.CharField(max_length=128)),
                ("name", models.CharField(max_length=80, unique=True)),
                ("phone", models.CharField(max_length=64)),
                ("picture", models.TextField(blank=True, null=True)),
                ("address", models.TextField()),
                ("post_code", models.CharField(max_length=15)),
                ("latitude", models.DecimalField(decimal_places=6, max_digits=10)),
                ("longitude", models.DecimalField(decimal_places=6, max_digits=10)),
                ("user_type", models.IntegerField()),
                (
                    "gender",
                    models.IntegerField(
                        choices=[
                            (0, "Não especificado"),
                            (1, "Masculino"),
                            (2, "Feminino"),
                        ]
                    ),
                ),
                (
                    "preferred_contact",
                    models.IntegerField(
                        choices=[(0, "Email"), (1, "Phone"), (2, "None")]
                    ),
                ),
                ("birth_date", models.DateField(blank=True, null=True)),
                ("created_date", models.DateTimeField(auto_now_add=True)),
                ("updated_date", models.DateTimeField(auto_now=True)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="CaregiverModel",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        verbose_name="id",
                    ),
                ),
                (
                    "hour_price",
                    models.DecimalField(
                        decimal_places=2, max_digits=6, verbose_name="Valor da hora"
                    ),
                ),
                (
                    "day_price",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=6,
                        null=True,
                        verbose_name="Valor da diaria",
                    ),
                ),
                (
                    "max_request_km",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        null=True,
                        verbose_name="Distancia maxima de trabalho",
                    ),
                ),
                (
                    "career_time",
                    models.PositiveSmallIntegerField(
                        default=0, verbose_name="Anos de experiencia"
                    ),
                ),
                (
                    "additional_info",
                    models.TextField(
                        blank=True, null=True, verbose_name="Informações adicionais"
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "custom_unavailable_days",
                    models.ManyToManyField(
                        blank=True,
                        related_name="customunavailableday",
                        to="core.customunavailabledaymodel",
                        verbose_name="Dias indisponiveis",
                    ),
                ),
                (
                    "fixed_unavailable_days",
                    models.ManyToManyField(
                        blank=True,
                        related_name="fixedunavailableday",
                        to="core.fixedunavailabledaymodel",
                        verbose_name="Dias da semana indisponivel",
                    ),
                ),
                (
                    "fixed_unavailable_hours",
                    models.ManyToManyField(
                        blank=True,
                        related_name="fixedunavailablehour",
                        to="core.fixedunavailablehourmodel",
                        verbose_name="Horarios indisponiveis",
                    ),
                ),
                (
                    "qualifications",
                    models.ManyToManyField(
                        blank=True,
                        related_name="qualifications",
                        to="core.qualificationmodel",
                        verbose_name="Qualificações",
                    ),
                ),
                (
                    "specializations",
                    models.ManyToManyField(
                        blank=True,
                        related_name="specialization",
                        to="core.specializationmodel",
                        verbose_name="Especializações",
                    ),
                ),
                (
                    "work_exp",
                    models.ManyToManyField(
                        blank=True,
                        related_name="workexperience",
                        to="core.workexperiencemodel",
                        verbose_name="Experiencia de trabalho",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Caregivers",
            },
        ),
        migrations.CreateModel(
            name="CareReceiverModel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "emergency_contact",
                    models.CharField(
                        max_length=15, verbose_name="Telefone de Emergência"
                    ),
                ),
                (
                    "share_special_care",
                    models.BooleanField(
                        default=False, verbose_name="Compartilhar Cuidados Especiais"
                    ),
                ),
                (
                    "additional_info",
                    models.TextField(
                        blank=True, null=True, verbose_name="Informações Adicionais"
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="CareReceiverModel",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Care Receiver",
                "verbose_name_plural": "Care Receivers",
            },
        ),
        migrations.CreateModel(
            name="CareRequestModel",
            fields=[
                (
                    "id",
                    models.UUIDField(editable=False, primary_key=True, serialize=False),
                ),
                ("date", models.DateField()),
                ("start_time", models.TimeField()),
                ("end_time", models.TimeField()),
                ("total_hours", models.SmallIntegerField()),
                ("final_price", models.DecimalField(decimal_places=2, max_digits=6)),
                (
                    "status",
                    models.IntegerField(
                        choices=[(0, "Pendente"), (1, "Recusado"), (2, "Autorizado")]
                    ),
                ),
                ("response_date", models.DateTimeField()),
                (
                    "caregiver",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.caregivermodel",
                    ),
                ),
                (
                    "carereceiver",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.carereceivermodel",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="RatingModel",
            fields=[
                (
                    "id",
                    models.UUIDField(editable=False, primary_key=True, serialize=False),
                ),
                (
                    "rating",
                    models.IntegerField(
                        choices=[
                            (1, "1 Estrela"),
                            (2, "2 Estrelas"),
                            (3, "3 Estrelas"),
                            (4, "4 Estrelas"),
                            (5, "5 Estrelas"),
                        ]
                    ),
                ),
                ("description", models.TextField(blank=True, null=True)),
                (
                    "care_request",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.carerequestmodel",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SpecialCareUserModel",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("description", models.TextField()),
                (
                    "care_receiver",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="special_care_users",
                        to="core.carereceivermodel",
                    ),
                ),
                (
                    "care_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="special_care_users",
                        to="core.specialcaremodel",
                    ),
                ),
            ],
        ),
    ]
